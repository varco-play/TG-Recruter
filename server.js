import TelegramBot from "node-telegram-bot-api";
import express from "express";
import dotenv from "dotenv";
dotenv.config();

const { BOT_TOKEN, MANAGER_CHAT_ID } = process.env;
if (!BOT_TOKEN || !MANAGER_CHAT_ID) {
  throw new Error("‚ùå BOT_TOKEN and MANAGER_CHAT_ID must be set in env");
}

const MANAGER_ID = MANAGER_CHAT_ID;
const bot = new TelegramBot(BOT_TOKEN, { polling: true });
const app = express();
const PORT = process.env.PORT || 10000;

// In-memory sessions
const sessions = {};

// Translations
const translations = {
  en: {
    chooseLang: "üåê Please choose your language:",
    mainMenu: "üè† Main Menu",
    about: "‚ÑπÔ∏è About Us",
    contacts: "üìû Contacts",
    vacancies: "üíº Vacancies",
    changeLang: "üåê Change Language",
    back: "‚¨ÖÔ∏è Back",
    mainMenuBtn: "üè† Main Menu",
    askName: "‚úçÔ∏è Please enter your full name:",
    askContact: "üì± Please enter your contact (WhatsApp/Telegram with country code):",
    askExperience: "üíº Please select your experience:",
    exp0: "0 years",
    exp1: "1-3 years",
    exp3: "3+ years",
    askState: "üèôÔ∏è Please enter your state:",
    askCity: "üèòÔ∏è Please enter your city:",
    askZip: "üè∑Ô∏è Please enter your ZIP code (numbers only):",
    askDriver: "üöó Do you have a driver‚Äôs license?",
    yes: "‚úÖ Yes",
    no: "‚ùå No",
    confirm: "üìã Please confirm your application:",
    confirmBtn: "‚úÖ Confirm and Submit",
    applied: "üéâ Your application has been sent!",
    invalidOption: "‚ö†Ô∏è Please select an option from the menu.",
    driverOptions: ["‚úÖ Yes", "‚ùå No"],
  },
  ru: {
    chooseLang: "üåê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
    mainMenu: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    about: "‚ÑπÔ∏è –û –Ω–∞—Å",
    contacts: "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
    vacancies: "üíº –í–∞–∫–∞–Ω—Å–∏–∏",
    changeLang: "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
    back: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
    mainMenuBtn: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    askName: "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
    askContact: "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (WhatsApp/Telegram —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã):",
    askExperience: "üíº –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç:",
    exp0: "0 –ª–µ—Ç",
    exp1: "1-3 –≥–æ–¥–∞",
    exp3: "3+ –ª–µ—Ç",
    askState: "üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —à—Ç–∞—Ç/–æ–±–ª–∞—Å—Ç—å:",
    askCity: "üèòÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
    askZip: "üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à ZIP –∫–æ–¥ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):",
    askDriver: "üöó –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ?",
    yes: "‚úÖ –î–∞",
    no: "‚ùå –ù–µ—Ç",
    confirm: "üìã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É:",
    confirmBtn: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å",
    applied: "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
    invalidOption: "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.",
    driverOptions: ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"],
  },
  es: {
    chooseLang: "üåê Por favor, elige tu idioma:",
    mainMenu: "üè† Men√∫ Principal",
    about: "‚ÑπÔ∏è Sobre Nosotros",
    contacts: "üìû Contactos",
    vacancies: "üíº Vacantes",
    changeLang: "üåê Cambiar idioma",
    back: "‚¨ÖÔ∏è Atr√°s",
    mainMenuBtn: "üè† Men√∫ Principal",
    askName: "‚úçÔ∏è Por favor, escribe tu nombre completo:",
    askContact: "üì± Por favor, escribe tu contacto (WhatsApp/Telegram con c√≥digo de pa√≠s):",
    askExperience: "üíº Por favor selecciona tu experiencia:",
    exp0: "0 a√±os",
    exp1: "1-3 a√±os",
    exp3: "3+ a√±os",
    askState: "üèôÔ∏è Por favor escribe tu estado:",
    askCity: "üèòÔ∏è Por favor escribe tu ciudad:",
    askZip: "üè∑Ô∏è Por favor escribe tu c√≥digo postal (solo n√∫meros):",
    askDriver: "üöó ¬øTienes licencia de conducir?",
    yes: "‚úÖ S√≠",
    no: "‚ùå No",
    confirm: "üìã Por favor confirma tu aplicaci√≥n:",
    confirmBtn: "‚úÖ Confirmar y Enviar",
    applied: "üéâ ¬°Tu aplicaci√≥n ha sido enviada!",
    invalidOption: "‚ö†Ô∏è Por favor selecciona una opci√≥n del men√∫.",
    driverOptions: ["‚úÖ S√≠", "‚ùå No"],
  },
};

const t = (lang, key) => translations[lang][key] || key;

// Keyboards
const langKeyboard = {
  reply_markup: {
    keyboard: [["English"], ["–†—É—Å—Å–∫–∏–π"], ["Espa√±ol"]],
    resize_keyboard: true,
    one_time_keyboard: true,
  },
};

const mainMenuKeyboard = (lang) => ({
  keyboard: [
    [t(lang, "about"), t(lang, "contacts")],
    [t(lang, "vacancies")],
    [t(lang, "changeLang")],
  ],
  resize_keyboard: true,
});

const backMainKeyboard = (lang) => ({
  keyboard: [[t(lang, "back"), t(lang, "mainMenuBtn")]],
  resize_keyboard: true,
});

const experienceKeyboard = (lang) => ({
  keyboard: [
    [t(lang, "exp0")],
    [t(lang, "exp1")],
    [t(lang, "exp3")],
    [t(lang, "back"), t(lang, "mainMenuBtn")],
  ],
  resize_keyboard: true,
});

const driverKeyboard = (lang) => ({
  keyboard: [
    [t(lang, "yes"), t(lang, "no")],
    [t(lang, "back"), t(lang, "mainMenuBtn")],
  ],
  resize_keyboard: true,
});

// Start command
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  sessions[chatId] = { step: "chooseLang" };
  bot.sendMessage(chatId, "üåê Please choose your language / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Por favor, elige tu idioma:", langKeyboard);
});

// Message handler
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const raw = msg.text;
  let s = sessions[chatId];

  if (!s) {
    sessions[chatId] = { step: "chooseLang" };
    s = sessions[chatId];
  }

  // Language selection
  if (s.step === "chooseLang") {
    if (raw === "English") s.lang = "en";
    else if (raw === "–†—É—Å—Å–∫–∏–π") s.lang = "ru";
    else if (raw === "Espa√±ol") s.lang = "es";
    else return bot.sendMessage(chatId, "‚ö†Ô∏è Please select a language / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Por favor, elige un idioma", langKeyboard);

    s.step = "main";
    return bot.sendMessage(chatId, t(s.lang, "mainMenu"), { reply_markup: mainMenuKeyboard(s.lang) });
  }

  const lang = s.lang || "en";

  // Global buttons
  if (raw === t(lang, "mainMenuBtn")) {
    s.step = "main";
    return bot.sendMessage(chatId, t(lang, "mainMenu"), { reply_markup: mainMenuKeyboard(lang) });
  }
  if (raw === t(lang, "back")) {
    if (s.previousStep) {
      s.step = s.previousStep;
      s.previousStep = null;
      switch (s.step) {
        case "askContact": return bot.sendMessage(chatId, t(lang, "askContact"), { reply_markup: backMainKeyboard(lang) });
        case "askExperience": return bot.sendMessage(chatId, t(lang, "askExperience"), { reply_markup: experienceKeyboard(lang) });
        case "askState": return bot.sendMessage(chatId, t(lang, "askState"), { reply_markup: backMainKeyboard(lang) });
        case "askCity": return bot.sendMessage(chatId, t(lang, "askCity"), { reply_markup: backMainKeyboard(lang) });
        case "askZip": return bot.sendMessage(chatId, t(lang, "askZip"), { reply_markup: backMainKeyboard(lang) });
        case "askDriver": return bot.sendMessage(chatId, t(lang, "askDriver"), { reply_markup: driverKeyboard(lang) });
      }
    }
  }

  // Main menu options
  if (s.step === "main") {
    if (raw === t(lang, "about")) return bot.sendMessage(chatId, "‚ÑπÔ∏è We are a company ...", { reply_markup: mainMenuKeyboard(lang) });
    if (raw === t(lang, "contacts")) return bot.sendMessage(chatId, "üìû Contact us at: +123456789", { reply_markup: mainMenuKeyboard(lang) });
    if (raw === t(lang, "changeLang")) {
      s.step = "chooseLang";
      return bot.sendMessage(chatId, t(lang, "chooseLang"), langKeyboard);
    }
    if (raw === t(lang, "vacancies")) {
      s.step = "chooseVacancy";
      return bot.sendMessage(chatId, "üíº Choose a vacancy:", {
        reply_markup: {
          keyboard: [["Cashier", "Deli Clerk"], ["Stoker", "Store Manager"], ["Bakery Associate", "Kitchen Staff"], [t(lang, "back"), t(lang, "mainMenuBtn")]],
          resize_keyboard: true,
        },
      });
    }
  }

  // Flow steps
  switch (s.step) {
    case "chooseVacancy": {
      s.vacancy = { en: raw, ru: raw, es: raw };
      s.previousStep = "chooseVacancy";
      s.step = "askName";
      return bot.sendMessage(chatId, t(lang, "askName"), { reply_markup: backMainKeyboard(lang) });
    }
    case "askName": {
      s.name = raw;
      s.previousStep = "askName";
      s.step = "askContact";
      return bot.sendMessage(chatId, t(lang, "askContact"), { reply_markup: backMainKeyboard(lang) });
    }
    case "askContact": {
      s.contact = raw;
      s.previousStep = "askContact";
      s.step = "askExperience";
      return bot.sendMessage(chatId, t(lang, "askExperience"), { reply_markup: experienceKeyboard(lang) });
    }
    case "askExperience": {
      if (![t(lang, "exp0"), t(lang, "exp1"), t(lang, "exp3")].includes(raw)) return bot.sendMessage(chatId, t(lang, "invalidOption"), { reply_markup: experienceKeyboard(lang) });
      s.experience = raw;
      s.previousStep = "askExperience";
      s.step = "askState";
      return bot.sendMessage(chatId, t(lang, "askState"), { reply_markup: backMainKeyboard(lang) });
    }
    case "askState": {
      s.state = raw;
      s.previousStep = "askState";
      s.step = "askCity";
      return bot.sendMessage(chatId, t(lang, "askCity"), { reply_markup: backMainKeyboard(lang) });
    }
    case "askCity": {
      s.city = raw;
      s.previousStep = "askCity";
      s.step = "askZip";
      return bot.sendMessage(chatId, t(lang, "askZip"), { reply_markup: backMainKeyboard(lang) });
    }
    case "askZip": {
      if (!/^\d+$/.test(raw)) return bot.sendMessage(chatId, t(lang, "invalidOption"), { reply_markup: backMainKeyboard(lang) });
      s.zip = raw;
      s.previousStep = "askZip";
      s.step = "askDriver";
      return bot.sendMessage(chatId, t(lang, "askDriver"), { reply_markup: driverKeyboard(lang) });
    }
    case "askDriver": {
      if (!t(lang, "driverOptions").includes(raw)) return bot.sendMessage(chatId, t(lang, "invalidOption"), { reply_markup: driverKeyboard(lang) });
      s.driver = raw;
      s.previousStep = "askDriver";
      s.step = "confirm";
      const summary = `${t(lang, "confirm")}
üè¢ Vacancy: ${s.vacancy[lang]}
‚úçÔ∏è Name: ${s.name}
üì± Contact: ${s.contact}
üíº Experience: ${s.experience}
üèôÔ∏è State: ${s.state}
üèòÔ∏è City: ${s.city}
üè∑Ô∏è ZIP: ${s.zip}
üöó Driver: ${s.driver}`;
      return bot.sendMessage(chatId, summary, {
        reply_markup: { keyboard: [[t(lang, "confirmBtn")], [t(lang, "back"), t(lang, "mainMenuBtn")]], resize_keyboard: true },
      });
    }
    case "confirm": {
      if (raw !== t(lang, "confirmBtn")) return bot.sendMessage(chatId, t(lang, "invalidOption"));
      const managerMsg = `New application:
üè¢ Vacancy: ${s.vacancy[lang]}
‚úçÔ∏è Name: ${s.name}
üì± Contact: ${s.contact}
üíº Experience: ${s.experience}
üèôÔ∏è State: ${s.state}
üèòÔ∏è City: ${s.city}
üè∑Ô∏è ZIP: ${s.zip}
üöó Driver: ${s.driver}`;
      await bot.sendMessage(MANAGER_ID, managerMsg);
      await bot.sendMessage(chatId, t(lang, "applied"), { reply_markup: mainMenuKeyboard(lang) });
      s.step = "main";
      s.previousStep = null;
      return;
    }
  }
});

// Keep server alive
app.get("/", (req, res) => res.send("ü§ñ Bot is running..."));
app.listen(PORT, () => console.log(`üåê Server running on ${PORT}`));
